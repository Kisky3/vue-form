{"remainingRequest":"/src/node_modules/vue-loader/lib/index.js??vue-loader-options!/src/src/components/molecules/ImageUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/src/src/components/molecules/ImageUpload.vue","mtime":1582099591000},{"path":"/src/node_modules/cache-loader/dist/cjs.js","mtime":1581297303000},{"path":"/src/node_modules/babel-loader/lib/index.js","mtime":1581297303000},{"path":"/src/node_modules/cache-loader/dist/cjs.js","mtime":1581297303000},{"path":"/src/node_modules/vue-loader/lib/index.js","mtime":1581297308000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAidnVleCI7CmltcG9ydCBjb21tb24gZnJvbSAiLi4vLi4vanMvY29tbW9uIjsKaW1wb3J0IGxhbWJkYSBmcm9tICIuLi8uLi9hcGkvbGFtYmRhIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJJbWFnZVVwbG9hZCIsCiAgcHJvcHM6IFsiaW5kZXgiLCAiaW1hZ2UiLCAiaXRlbUluZGV4Il0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGltYWdlS2V5OiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKFsiaXRlbUxpc3QiLCAiaW1hZ2VMaXN0Il0pLAogICAgaXRlbURhdGEgKCkgewogICAgICByZXR1cm4gdGhpcy5pdGVtTGlzdFt0aGlzLml0ZW1JbmRleF0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGZpbGVDbGljazogZnVuY3Rpb24oKSB7CiAgICAgICQoIiN1cGxvYWRfIiArIHRoaXMuaW5kZXgpLmNsaWNrKCk7CiAgICB9LAogICAgb25GaWxlQ2hhbmdlOiBmdW5jdGlvbihlKSB7CiAgICAgIHZhciBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzOwogICAgICB0aGlzLmNyZWF0ZUltYWdlKGZpbGVzWzBdLCB0aGlzLmluZGV4KTsKICAgIH0sCiAgICBhc3luYyBjcmVhdGVJbWFnZShmaWxlLCBpbmRleCkgewogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgdmFyIG9iaiA9IHt9OwogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkgewogICAgICAgIG9iai50aHVtbmFpbCA9IGUudGFyZ2V0LnJlc3VsdDsKICAgICAgICBvYmoudXBsb2FkRmlsZSA9IGZpbGU7CiAgICAgICAgb2JqLm5hbWUgPSBmaWxlLm5hbWU7CgogICAgICAgIC8vIOOCouODg+ODl+ODreODvOODieaIkOWKn+OBmeOCjOOBsOS/neWtmOOBmeOCiwogICAgICAgIGlmICh2bS5jaGVja0VtcHR5SW1hZ2Uob2JqKSkgewogICAgICAgICAgdm0uc2V0RXJyb3JNc2coIm5vLWltYWdlIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbW1vbi5nZXRJbWdLZXkoZmlsZSkudGhlbihpbWFnZUtleSA9PiB7CiAgICAgICAgICAgIHZtLnNhdmVJbWdLZXkoaW5kZXgsIGltYWdlS2V5KTsKICAgICAgICAgICAgdm0uc2F2ZUltYWdlRGF0YShvYmosIGluZGV4KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9LAogICAgY2hlY2tFbXB0eUltYWdlOiBmdW5jdGlvbihpbWFnZSkgewogICAgICByZXR1cm4gKAogICAgICAgIGltYWdlLnRodW1uYWlsID09PSAiIiAmJgogICAgICAgIE9iamVjdC5rZXlzKGltYWdlLnVwbG9hZEZpbGUpLmxlbmd0aCA9PT0gMCAmJgogICAgICAgIGltYWdlLm5hbWUgPT09ICIiCiAgICAgICk7CiAgICB9LAogICAgc2F2ZUltZ0tleShpbmRleCwgaW1hZ2VLZXkpIHsKICAgICAgdGhpcy5pdGVtRGF0YS5pbWFnZXNbaW5kZXhdID0gaW1hZ2VLZXk7CiAgICAgIHRoaXMuc2F2ZUl0ZW1EYXRhKCk7CiAgICB9LAogICAgc2F2ZUltYWdlRGF0YTogZnVuY3Rpb24oaW1hZ2UpIHsKICAgICAgLyog5ZCE5ZWG5ZOB44Gu55S75YOP44Kq44OW44K444Kn44Kv44OI44Gr5L+d5a2YICovCiAgICAgIGxldCBvYmogPSB0aGlzLmltYWdlTGlzdFt0aGlzLml0ZW1JbmRleF07CiAgICAgIG9iai5zcGxpY2UodGhpcy5pbmRleCwgMSwgaW1hZ2UpOwoKICAgICAgdGhpcy5pbWFnZUxpc3Quc3BsaWNlKHRoaXMuaXRlbUluZGV4LCAxLCBvYmopOwogICAgICB0aGlzLiRzdG9yZS5jb21taXQoInNhdmVTdG9yZUltYWdlTGlzdCIsIHRoaXMuaW1hZ2VMaXN0KTsKICAgIH0sCiAgICBzYXZlSXRlbURhdGEoKSB7CiAgICAgIHRoaXMuaXRlbUxpc3Quc3BsaWNlKHRoaXMuaXRlbUluZGV4LCAxLCB0aGlzLml0ZW1EYXRhKTsKICAgICAgLy8g55Sf5oiQ44GV44KM44Gf5ZWG5ZOB44OH44O844K/44KSc3RvcmXjgavkv53lrZjjgZnjgosKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCJzYXZlU3RvcmVJdGVtTGlzdCIsIHRoaXMuaXRlbUxpc3QpOwogICAgfSwKICAgIHByZXZpZXdJbWFnZTogZnVuY3Rpb24oaW1hZ2UpIHsKICAgICAgcmV0dXJuICEoCiAgICAgICAgaW1hZ2UudGh1bW5haWwgPT09ICIiICYmCiAgICAgICAgT2JqZWN0LmtleXMoaW1hZ2UudXBsb2FkRmlsZSkubGVuZ3RoID09PSAwICYmCiAgICAgICAgaW1hZ2UubmFtZSA9PT0gIiIKICAgICAgKTsKICAgIH0sCiAgICBkZWxldGVJbWFnZTogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuaW1hZ2UgPSB7CiAgICAgICAgdGh1bW5haWw6ICIiLAogICAgICAgIHVwbG9hZEZpbGU6IHt9LAogICAgICAgIG5hbWU6ICIiCiAgICAgIH07CgogICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgbGV0IG9iaiA9IHRoaXMuaW1hZ2VMaXN0W3RoaXMuaXRlbUluZGV4XTsKICAgICAgb2JqLnNwbGljZSh0aGlzLmluZGV4LCAxLCB0aGlzLmltYWdlKTsKICAgICAgdGhpcy5pbWFnZSA9IG9iajsKICAgICAgLyog55S75YOP44OX44Os44OT44Ol44O855SoICovCiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgKICAgICAgICAic2F2ZVN0b3JlSW1hZ2VMaXN0IiwKICAgICAgICB0aGlzLmltYWdlTGlzdC5zcGxpY2UodGhpcy5pdGVtSW5kZXgsIDEsIG9iaikKICAgICAgKTsKICAgICAgLyog55S75YOP6YCB5L+h55SoICovCiAgICAgIHRoaXMuJGVtaXQoImRlbEltZ0tleSIsIHRoaXMuaW5kZXgsIHRoaXMuaW1hZ2VLZXkpOwogICAgfSwKICAgIGFzeW5jIGdldFByZXNpZ25lZFVybChmaWxlKSB7CiAgICAgIHJldHVybiBhd2FpdCBsYW1iZGEKICAgICAgICAuZ2V0U2lnbmVkVVJMKGZpbGUpCiAgICAgICAgLnRoZW4ocmVzID0+IHsKICAgICAgICAgIHJldHVybiByZXMuZGF0YS51cGxvYWRVcmw7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICAgICAgfSk7CiAgICB9LAogICAgYXN5bmMgdXBsb2FkUzMocHJlU2lnbmVkVXJsLCB1cF9maWxlKSB7CiAgICAgIHRyeSB7CiAgICAgICAgLyogaGVhZGVyc+OBp+OCouODg+ODl+ODreODvOODieOBl+OBn+eUu+WDj+OBrkNvbnRlbnQgVHlwZeOCkuioreWumuOBmeOCiyAqLwogICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7CiAgICAgICAgICAiY29udGVudC10eXBlIjogdXBfZmlsZS50eXBlCiAgICAgICAgfTsKICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQocHJlU2lnbmVkVXJsLCB1cF9maWxlLCB7CiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHByZVNpZ25lZFVybCAmJiBwcmVTaWduZWRVcmwuaW5kZXhPZigiPyIpICE9IC0xKSB7CiAgICAgICAgICB0aGlzLmltYWdlS2V5ID0gcHJlU2lnbmVkVXJsLnNwbGl0KCI/IilbMF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmltYWdlS2V5OwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgfQogICAgfQogIH0KfTsK"},{"version":3,"sources":["ImageUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"ImageUpload.vue","sourceRoot":"src/components/molecules","sourcesContent":["<template>\n  <div class=\"c-upload-btn\" @click=\"fileClick\">\n    <span\n      v-show=\"!previewImage(image)\"\n      class=\"iconfont icon-camera c-upload-camera\"\n    ></span>\n    <div v-if=\"previewImage(image)\">\n      <div class=\"c-upload-btn active\">\n        <img :src=\"image.thumnail\" class=\"c-upload-img\" />\n      </div>\n      <a class=\"c-close_button\" @click=\"deleteImage\"></a>\n    </div>\n    <input\n      :id=\"'upload_' + index\"\n      type=\"file\"\n      accept=\"image/*\"\n      @change=\"onFileChange($event)\"\n    />\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport { mapState } from \"vuex\";\nimport common from \"../../js/common\";\nimport lambda from \"../../api/lambda\";\nexport default {\n  name: \"ImageUpload\",\n  props: [\"index\", \"image\", \"itemIndex\"],\n  data() {\n    return {\n      imageKey: null\n    };\n  },\n  computed: {\n    ...mapState([\"itemList\", \"imageList\"]),\n    itemData () {\n      return this.itemList[this.itemIndex]\n    }\n  },\n  methods: {\n    fileClick: function() {\n      $(\"#upload_\" + this.index).click();\n    },\n    onFileChange: function(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      this.createImage(files[0], this.index);\n    },\n    async createImage(file, index) {\n      var reader = new FileReader();\n      var vm = this;\n      var obj = {};\n      reader.onload = function(e) {\n        obj.thumnail = e.target.result;\n        obj.uploadFile = file;\n        obj.name = file.name;\n\n        // アップロード成功すれば保存する\n        if (vm.checkEmptyImage(obj)) {\n          vm.setErrorMsg(\"no-image\");\n        } else {\n          common.getImgKey(file).then(imageKey => {\n            vm.saveImgKey(index, imageKey);\n            vm.saveImageData(obj, index);\n          });\n        }\n      };\n      reader.readAsDataURL(file);\n    },\n    checkEmptyImage: function(image) {\n      return (\n        image.thumnail === \"\" &&\n        Object.keys(image.uploadFile).length === 0 &&\n        image.name === \"\"\n      );\n    },\n    saveImgKey(index, imageKey) {\n      this.itemData.images[index] = imageKey;\n      this.saveItemData();\n    },\n    saveImageData: function(image) {\n      /* 各商品の画像オブジェクトに保存 */\n      let obj = this.imageList[this.itemIndex];\n      obj.splice(this.index, 1, image);\n\n      this.imageList.splice(this.itemIndex, 1, obj);\n      this.$store.commit(\"saveStoreImageList\", this.imageList);\n    },\n    saveItemData() {\n      this.itemList.splice(this.itemIndex, 1, this.itemData);\n      // 生成された商品データをstoreに保存する\n      this.$store.commit(\"saveStoreItemList\", this.itemList);\n    },\n    previewImage: function(image) {\n      return !(\n        image.thumnail === \"\" &&\n        Object.keys(image.uploadFile).length === 0 &&\n        image.name === \"\"\n      );\n    },\n    deleteImage: function() {\n      this.image = {\n        thumnail: \"\",\n        uploadFile: {},\n        name: \"\"\n      };\n\n      event.stopPropagation();\n      let obj = this.imageList[this.itemIndex];\n      obj.splice(this.index, 1, this.image);\n      this.image = obj;\n      /* 画像プレビュー用 */\n      this.$store.commit(\n        \"saveStoreImageList\",\n        this.imageList.splice(this.itemIndex, 1, obj)\n      );\n      /* 画像送信用 */\n      this.$emit(\"delImgKey\", this.index, this.imageKey);\n    },\n    async getPresignedUrl(file) {\n      return await lambda\n        .getSignedURL(file)\n        .then(res => {\n          return res.data.uploadUrl;\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    },\n    async uploadS3(preSignedUrl, up_file) {\n      try {\n        /* headersでアップロードした画像のContent Typeを設定する */\n        const headers = {\n          \"content-type\": up_file.type\n        };\n        let response = await axios.put(preSignedUrl, up_file, {\n          headers: headers\n        });\n        if (preSignedUrl && preSignedUrl.indexOf(\"?\") != -1) {\n          this.imageKey = preSignedUrl.split(\"?\")[0];\n        }\n        return this.imageKey;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n};\n</script>\n<style>\n.c-upload-btn {\n  width: 180px;\n  height: 180px;\n  border: 1px dashed #dedede;\n  margin: 15px 10px 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  background: #fff;\n}\n\n.c-upload-btn.active {\n  border: solid 1px #e1e1e1;\n}\n\n.c-upload-camera {\n  font-size: 60px;\n  color: #dedede;\n  font-weight: bold;\n}\n\n.upload_warp {\n  height: 20vh;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.c-upload-img {\n  max-width: 100%;\n  float: left;\n  line-height: 100px;\n  display: table-cell;\n  text-align: center;\n  background-color: #fff;\n  height: 100%;\n}\n\n.c-close_button::before {\n  content: \"\\00D7\";\n}\n\n.c-close_button {\n  position: absolute;\n  width: 100%;\n  height: 30%;\n  left: 0;\n  bottom: 0;\n  font-size: 35px;\n  font-weight: bold;\n  color: #fff;\n  background: rgba(0, 0, 0, 0.6);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* sp レスポンス対応 */\n@media only screen and (max-width: 767px) {\n  .c-upload-btn {\n    width: 25vw;\n    height: 25vw;\n  }\n\n  .c-upload-camera {\n    font-size: 40px;\n  }\n}\n</style>\n"]}]}