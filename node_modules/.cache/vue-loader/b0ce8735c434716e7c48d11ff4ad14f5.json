{"remainingRequest":"/src/node_modules/vue-loader/lib/index.js??vue-loader-options!/src/src/components/molecules/ImageUpload.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/src/src/components/molecules/ImageUpload.vue","mtime":1582092651000},{"path":"/src/node_modules/css-loader/dist/cjs.js","mtime":1581297304000},{"path":"/src/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1581297308000},{"path":"/src/node_modules/postcss-loader/src/index.js","mtime":1581297306000},{"path":"/src/node_modules/cache-loader/dist/cjs.js","mtime":1581297303000},{"path":"/src/node_modules/vue-loader/lib/index.js","mtime":1581297308000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmMtdXBsb2FkLWJ0biB7CiAgd2lkdGg6IDE4MHB4OwogIGhlaWdodDogMTgwcHg7CiAgYm9yZGVyOiAxcHggZGFzaGVkICNkZWRlZGU7CiAgbWFyZ2luOiAxNXB4IDEwcHggMTVweDsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGJhY2tncm91bmQ6ICNmZmY7Cn0KCi5jLXVwbG9hZC1idG4uYWN0aXZlIHsKICBib3JkZXI6IHNvbGlkIDFweCAjZTFlMWUxOwp9CgouYy11cGxvYWQtY2FtZXJhIHsKICBmb250LXNpemU6IDYwcHg7CiAgY29sb3I6ICNkZWRlZGU7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi51cGxvYWRfd2FycCB7CiAgaGVpZ2h0OiAyMHZoOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgbWFyZ2luLXRvcDogMjBweDsKfQoKLmMtdXBsb2FkLWltZyB7CiAgbWF4LXdpZHRoOiAxMDAlOwogIGZsb2F0OiBsZWZ0OwogIGxpbmUtaGVpZ2h0OiAxMDBweDsKICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIGhlaWdodDogMTAwJTsKfQoKLmMtY2xvc2VfYnV0dG9uOjpiZWZvcmUgewogIGNvbnRlbnQ6ICJcMDBENyI7Cn0KCi5jLWNsb3NlX2J1dHRvbiB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMzAlOwogIGxlZnQ6IDA7CiAgYm90dG9tOiAwOwogIGZvbnQtc2l6ZTogMzVweDsKICBmb250LXdlaWdodDogYm9sZDsKICBjb2xvcjogI2ZmZjsKICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNik7CiAgY3Vyc29yOiBwb2ludGVyOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLyogc3Ag44Os44K544Od44Oz44K55a++5b+cICovCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHsKICAuYy11cGxvYWQtYnRuIHsKICAgIHdpZHRoOiAyNXZ3OwogICAgaGVpZ2h0OiAyNXZ3OwogIH0KCiAgLmMtdXBsb2FkLWNhbWVyYSB7CiAgICBmb250LXNpemU6IDQwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["ImageUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ImageUpload.vue","sourceRoot":"src/components/molecules","sourcesContent":["<template>\n  <div class=\"c-upload-btn\" @click=\"fileClick\">\n    <span\n      v-show=\"!previewImage(image)\"\n      class=\"iconfont icon-camera c-upload-camera\"\n    ></span>\n    <div v-if=\"previewImage(image)\">\n      <div class=\"c-upload-btn active\">\n        <img :src=\"image.thumnail\" class=\"c-upload-img\" />\n      </div>\n      <a class=\"c-close_button\" @click=\"deleteImage\"></a>\n    </div>\n    <input\n      :id=\"'upload_' + index\"\n      type=\"file\"\n      accept=\"image/*\"\n      @change=\"onFileChange($event)\"\n    />\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport { mapState } from \"vuex\";\nimport common from \"../../js/common\";\nimport lambda from \"../../api/lambda\";\nexport default {\n  name: \"ImageUpload\",\n  props: [\"index\", \"image\", \"itemIndex\"],\n  data() {\n    return {\n      imageKey: null,\n      initialItemData: {\n        title: null,\n        images: {},\n        cat_lvl0: null,\n        cat_lvl1: null,\n        cat_lvl2: null,\n        item_comment: null\n      }\n    };\n  },\n  computed: {\n    ...mapState([\"itemList\",\"imageList\"]),\n  },\n  methods: {\n    fileClick: function() {\n      $(\"#upload_\" + this.index).click();\n    },\n    onFileChange: function(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      this.createImage(files[0], this.index);\n    },\n    async createImage(file, index) {\n      var reader = new FileReader();\n      var vm = this;\n      var obj = {};\n      reader.onload = function(e) {\n        obj.thumnail = e.target.result;\n        obj.uploadFile = file;\n        obj.name = file.name;\n\n        // アップロード成功すれば保存する\n        if (vm.checkEmptyImage(obj)) {\n          vm.setErrorMsg(\"no-image\");\n        } else {\n          let imageKey = common.getImgKey(file);\n          vm.saveImageData(obj, index);\n          vm.saveImgKey(index, imageKey)\n        }\n      };\n      reader.readAsDataURL(file);\n    },\n    checkEmptyImage: function(image) {\n      return (\n        image.thumnail === \"\" &&\n        Object.keys(image.uploadFile).length === 0 &&\n        image.name === \"\"\n      );\n    },\n    saveImgKey(index, imageKey) {\n      this.initialItemData.images[index] = imageKey;\n      this.saveItemData();\n    },\n    saveImageData: function(image) {\n      /* 各商品の画像オブジェクトに保存 */\n      let obj = this.imageList[this.itemIndex];\n      obj.splice(this.index, 1, image);\n\n      this.imageList.splice(this.itemIndex, 1, obj);\n      this.$store.commit('saveStoreImageList', this.imageList)\n    },\n    saveItemData() {\n      this.itemList.splice(this.itemIndex, 1, this.initialItemData);\n      // 生成された商品データをstoreに保存する\n      this.$store.commit('saveStoreItemList', this.itemList)\n    },\n    previewImage: function(image) {\n      return !(\n        image.thumnail === \"\" &&\n        Object.keys(image.uploadFile).length === 0 &&\n        image.name === \"\"\n      );\n    },\n    deleteImage: function() {\n      this.image = {\n        thumnail: \"\",\n        uploadFile: {},\n        name: \"\"\n      };\n\n      event.stopPropagation();\n      let obj = this.imageList[this.itemIndex];\n      obj.splice(this.index, 1, this.image);\n      this.image = obj;\n      /* 画像プレビュー用 */\n       this.$store.commit('saveStoreImageList', this.imageList.splice(this.itemIndex, 1, obj))\n      /* 画像送信用 */\n      this.$emit(\"delImgKey\", this.index, this.imageKey);\n    },\n    async getPresignedUrl(file) {\n      return await lambda\n        .getSignedURL(file)\n        .then(res => {\n          return res.data.uploadUrl;\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    },\n    async uploadS3(preSignedUrl, up_file) {\n      try {\n        /* headersでアップロードした画像のContent Typeを設定する */\n        const headers = {\n          \"content-type\": up_file.type\n        };\n        let response = await axios.put(preSignedUrl, up_file, {\n          headers: headers\n        });\n        if (preSignedUrl && preSignedUrl.indexOf(\"?\") != -1) {\n          this.imageKey = preSignedUrl.split(\"?\")[0];\n        }\n        return this.imageKey;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n};\n</script>\n<style>\n.c-upload-btn {\n  width: 180px;\n  height: 180px;\n  border: 1px dashed #dedede;\n  margin: 15px 10px 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  background: #fff;\n}\n\n.c-upload-btn.active {\n  border: solid 1px #e1e1e1;\n}\n\n.c-upload-camera {\n  font-size: 60px;\n  color: #dedede;\n  font-weight: bold;\n}\n\n.upload_warp {\n  height: 20vh;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.c-upload-img {\n  max-width: 100%;\n  float: left;\n  line-height: 100px;\n  display: table-cell;\n  text-align: center;\n  background-color: #fff;\n  height: 100%;\n}\n\n.c-close_button::before {\n  content: \"\\00D7\";\n}\n\n.c-close_button {\n  position: absolute;\n  width: 100%;\n  height: 30%;\n  left: 0;\n  bottom: 0;\n  font-size: 35px;\n  font-weight: bold;\n  color: #fff;\n  background: rgba(0, 0, 0, 0.6);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* sp レスポンス対応 */\n@media only screen and (max-width: 767px) {\n  .c-upload-btn {\n    width: 25vw;\n    height: 25vw;\n  }\n\n  .c-upload-camera {\n    font-size: 40px;\n  }\n}\n</style>\n"]}]}