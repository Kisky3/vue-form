{"remainingRequest":"/src/node_modules/babel-loader/lib/index.js!/src/node_modules/eslint-loader/index.js??ref--13-0!/src/src/api/lambda.js","dependencies":[{"path":"/src/src/api/lambda.js","mtime":1581471207000},{"path":"/src/node_modules/cache-loader/dist/cjs.js","mtime":1581297303000},{"path":"/src/node_modules/babel-loader/lib/index.js","mtime":1581297303000},{"path":"/src/node_modules/eslint-loader/index.js","mtime":1581297304000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBjb25maWcgZnJvbSAnLi4vc2V0dGluZ3MvY29uZmlnJzsKZXhwb3J0IGRlZmF1bHQgewogIGdldFNpZ25lZFVSTDogZnVuY3Rpb24gZ2V0U2lnbmVkVVJMKGZpbGUpIHsKICAgIHZhciBlbmRwb2ludCA9IGNvbmZpZy5BV1NfTEFNQkRBX0dFVFNJR05FRFVSTF9FTkRQT0lOVDsKICAgIHZhciBwYXlsb2FkID0gewogICAgICBjb250ZW50VHlwZTogZmlsZS50eXBlCiAgICB9OwogICAgcmV0dXJuIGF4aW9zLnBvc3QoZW5kcG9pbnQsIHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICBjb25zb2xlLmxvZyhyZXMpOwogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcyB8fCAnLycpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnLycpOwogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["/src/src/api/lambda.js"],"names":["axios","config","getSignedURL","file","endpoint","AWS_LAMBDA_GETSIGNEDURL_ENDPOINT","payload","contentType","type","post","then","res","console","log","Promise","resolve","catch","err","error","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe;AACXC,EAAAA,YADW,wBACEC,IADF,EACQ;AACf,QAAIC,QAAQ,GAAGH,MAAM,CAACI,gCAAtB;AACA,QAAIC,OAAO,GAAG;AACVC,MAAAA,WAAW,EAAEJ,IAAI,CAACK;AADR,KAAd;AAGA,WAAOR,KAAK,CAACS,IAAN,CAAWL,QAAX,EAAqBE,OAArB,EACFI,IADE,CACG,UAACC,GAAD,EAAS;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOG,OAAO,CAACC,OAAR,CAAgBJ,GAAG,IAAI,GAAvB,CAAP;AACH,KAJE,EAKFK,KALE,CAKI,UAACC,GAAD,EAAS;AACZL,MAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACA,aAAOH,OAAO,CAACK,MAAR,CAAe,GAAf,CAAP;AACH,KARE,CAAP;AASH;AAfU,CAAf","sourcesContent":["import axios from 'axios'\nimport config from '../settings/config'\n\nexport default {\n    getSignedURL(file) {\n        let endpoint = config.AWS_LAMBDA_GETSIGNEDURL_ENDPOINT\n        let payload = {\n            contentType: file.type\n        }\n        return axios.post(endpoint, payload)\n            .then((res) => {\n                console.log(res)\n                return Promise.resolve(res || '/')\n            })\n            .catch((err) => {\n                console.error(err)\n                return Promise.reject('/')\n            })\n    }\n}\n"]}]}